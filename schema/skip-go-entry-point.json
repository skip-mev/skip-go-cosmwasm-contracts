{
  "contract_name": "skip-go-entry-point",
  "contract_version": "0.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "INSTANTIATE ///",
    "type": "object",
    "required": [
      "ibc_transfer_contract_address",
      "swap_venues"
    ],
    "properties": {
      "ibc_transfer_contract_address": {
        "type": "string"
      },
      "swap_venues": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SwapVenue"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "SwapVenue": {
        "description": "COMMON TYPES ///",
        "type": "object",
        "required": [
          "adapter_contract_address",
          "name"
        ],
        "properties": {
          "adapter_contract_address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "EXECUTE ///",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap_and_action_with_recover"
        ],
        "properties": {
          "swap_and_action_with_recover": {
            "type": "object",
            "required": [
              "affiliates",
              "min_asset",
              "post_swap_action",
              "recovery_addr",
              "timeout_timestamp",
              "user_swap"
            ],
            "properties": {
              "affiliates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Affiliate"
                }
              },
              "min_asset": {
                "$ref": "#/definitions/Asset"
              },
              "post_swap_action": {
                "$ref": "#/definitions/Action"
              },
              "recovery_addr": {
                "$ref": "#/definitions/Addr"
              },
              "sent_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "timeout_timestamp": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "user_swap": {
                "$ref": "#/definitions/Swap"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap_and_action"
        ],
        "properties": {
          "swap_and_action": {
            "type": "object",
            "required": [
              "affiliates",
              "min_asset",
              "post_swap_action",
              "timeout_timestamp",
              "user_swap"
            ],
            "properties": {
              "affiliates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Affiliate"
                }
              },
              "min_asset": {
                "$ref": "#/definitions/Asset"
              },
              "post_swap_action": {
                "$ref": "#/definitions/Action"
              },
              "sent_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "timeout_timestamp": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "user_swap": {
                "$ref": "#/definitions/Swap"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "user_swap"
        ],
        "properties": {
          "user_swap": {
            "type": "object",
            "required": [
              "affiliates",
              "min_asset",
              "remaining_asset",
              "swap"
            ],
            "properties": {
              "affiliates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Affiliate"
                }
              },
              "min_asset": {
                "$ref": "#/definitions/Asset"
              },
              "remaining_asset": {
                "$ref": "#/definitions/Asset"
              },
              "swap": {
                "$ref": "#/definitions/Swap"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "post_swap_action"
        ],
        "properties": {
          "post_swap_action": {
            "type": "object",
            "required": [
              "exact_out",
              "min_asset",
              "post_swap_action",
              "timeout_timestamp"
            ],
            "properties": {
              "exact_out": {
                "type": "boolean"
              },
              "min_asset": {
                "$ref": "#/definitions/Asset"
              },
              "post_swap_action": {
                "$ref": "#/definitions/Action"
              },
              "timeout_timestamp": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "type": "object",
            "required": [
              "action",
              "exact_out",
              "timeout_timestamp"
            ],
            "properties": {
              "action": {
                "$ref": "#/definitions/Action"
              },
              "exact_out": {
                "type": "boolean"
              },
              "min_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "sent_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "timeout_timestamp": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "action_with_recover"
        ],
        "properties": {
          "action_with_recover": {
            "type": "object",
            "required": [
              "action",
              "exact_out",
              "recovery_addr",
              "timeout_timestamp"
            ],
            "properties": {
              "action": {
                "$ref": "#/definitions/Action"
              },
              "exact_out": {
                "type": "boolean"
              },
              "min_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "recovery_addr": {
                "$ref": "#/definitions/Addr"
              },
              "sent_asset": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "timeout_timestamp": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "COMMON TYPES ///",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "to_address"
                ],
                "properties": {
                  "to_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc_transfer"
            ],
            "properties": {
              "ibc_transfer": {
                "type": "object",
                "required": [
                  "ibc_info"
                ],
                "properties": {
                  "fee_swap": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SwapExactAssetOut"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ibc_info": {
                    "$ref": "#/definitions/IbcInfo"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "contract_call"
            ],
            "properties": {
              "contract_call": {
                "type": "object",
                "required": [
                  "contract_address",
                  "msg"
                ],
                "properties": {
                  "contract_address": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Affiliate": {
        "type": "object",
        "required": [
          "address",
          "basis_points_fee"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "basis_points_fee": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Asset": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Cw20Coin"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw20Coin": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IbcFee": {
        "description": "COMMON TYPES ///",
        "type": "object",
        "required": [
          "ack_fee",
          "recv_fee",
          "timeout_fee"
        ],
        "properties": {
          "ack_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "recv_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "timeout_fee": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "IbcInfo": {
        "type": "object",
        "required": [
          "memo",
          "receiver",
          "recover_address",
          "source_channel"
        ],
        "properties": {
          "fee": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcFee"
              },
              {
                "type": "null"
              }
            ]
          },
          "memo": {
            "type": "string"
          },
          "receiver": {
            "type": "string"
          },
          "recover_address": {
            "type": "string"
          },
          "source_channel": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Route": {
        "type": "object",
        "required": [
          "offer_asset",
          "operations"
        ],
        "properties": {
          "offer_asset": {
            "$ref": "#/definitions/Asset"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapOperation"
            }
          }
        },
        "additionalProperties": false
      },
      "SmartSwapExactAssetIn": {
        "type": "object",
        "required": [
          "routes",
          "swap_venue_name"
        ],
        "properties": {
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Route"
            }
          },
          "swap_venue_name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Swap": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "swap_exact_asset_in"
            ],
            "properties": {
              "swap_exact_asset_in": {
                "$ref": "#/definitions/SwapExactAssetIn"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "swap_exact_asset_out"
            ],
            "properties": {
              "swap_exact_asset_out": {
                "$ref": "#/definitions/SwapExactAssetOut"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "smart_swap_exact_asset_in"
            ],
            "properties": {
              "smart_swap_exact_asset_in": {
                "$ref": "#/definitions/SmartSwapExactAssetIn"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SwapExactAssetIn": {
        "type": "object",
        "required": [
          "operations",
          "swap_venue_name"
        ],
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapOperation"
            }
          },
          "swap_venue_name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SwapExactAssetOut": {
        "type": "object",
        "required": [
          "operations",
          "swap_venue_name"
        ],
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapOperation"
            }
          },
          "refund_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "swap_venue_name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SwapOperation": {
        "type": "object",
        "required": [
          "denom_in",
          "denom_out",
          "pool"
        ],
        "properties": {
          "denom_in": {
            "type": "string"
          },
          "denom_out": {
            "type": "string"
          },
          "interface": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "pool": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "QUERY ///",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "swap_venue_adapter_contract"
        ],
        "properties": {
          "swap_venue_adapter_contract": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ibc_transfer_adapter_contract"
        ],
        "properties": {
          "ibc_transfer_adapter_contract": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "ibc_transfer_adapter_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "swap_venue_adapter_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
